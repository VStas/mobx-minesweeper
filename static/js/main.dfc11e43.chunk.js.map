{"version":3,"sources":["store/GameStore.ts","utils/MinesweeperFieldGenerator.ts","components/GameCell.tsx","components/GameField.tsx","components/GameStatusMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellStatus","GameStatus","BOMB_VALUE","MinesweeperFieldGenerator","columns","rows","totalBombs","fieldValues","this","i","push","placeBombs","placeNumbers","row","column","count","coord","bombsPlaced","Math","floor","random","j","getBombsNearby","GameStore","cells","gameStatus","cellsOpen","openCell","IN_PROGRESS","cell","status","DEFAULT","OPEN","value","isVictory","WON","LOST","toggleMarkBomb","MARKED_BOMB","makeObservable","observable","action","TOTAL_ROWS","getCellDisplayValue","GameCell","observer","props","className","cn","onClick","onOpen","onContextMenu","e","preventDefault","onToggleMarkBomb","GameField","gameStore","map","GameStatusMessage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfc11e43.chunk.js","sourcesContent":["import { action, makeObservable, observable } from \"mobx\";\r\nimport { BOMB_VALUE, MinesweeperFieldGenerator } from \"../utils/MinesweeperFieldGenerator\";\r\n\r\nexport enum CellStatus {\r\n    DEFAULT, OPEN, MARKED_BOMB \r\n};\r\n\r\nexport enum GameStatus {\r\n    IN_PROGRESS, WON, LOST\r\n}\r\n\r\nexport type Cell = {\r\n    status: CellStatus;\r\n    value: number;\r\n};\r\n\r\nconst TOTAL_COLUMNS = 10;\r\nconst TOTAL_ROWS = 5;\r\nconst TOTAL_BOMBS = 5;\r\n\r\n// надо вынести Cell в отдельный класс, но мне было лень\r\n\r\nexport class GameStore {\r\n    cells: Cell[][];\r\n    gameStatus: GameStatus;\r\n    cellsOpen = 0;\r\n\r\n    constructor() {\r\n        const {fieldValues} = new MinesweeperFieldGenerator(TOTAL_COLUMNS, TOTAL_ROWS, TOTAL_BOMBS);\r\n\r\n        this.cells = [];\r\n        for (let i = 0; i < TOTAL_ROWS; i++) {\r\n            for (let j = 0; j < TOTAL_COLUMNS; j++) {\r\n                if (!this.cells[i]) {\r\n                    this.cells[i] = [];\r\n                }\r\n                this.cells[i][j] = {\r\n                    status: CellStatus.DEFAULT,\r\n                    value: fieldValues[i][j]\r\n                };\r\n            }\r\n        }\r\n\r\n        this.gameStatus = GameStatus.IN_PROGRESS;\r\n\r\n        makeObservable(this, {\r\n            cells: observable,\r\n            gameStatus: observable,\r\n            openCell: action,\r\n            toggleMarkBomb: action\r\n        });\r\n\r\n    }\r\n\r\n    openCell = (row: number, column: number) => {\r\n        if (this.gameStatus !== GameStatus.IN_PROGRESS) {\r\n            return;\r\n        }\r\n\r\n        if (row < 0 || row >= TOTAL_ROWS || column < 0 || column >= TOTAL_COLUMNS) {\r\n            return;\r\n        }\r\n\r\n        const cell = this.cells[row][column];\r\n\r\n        if (cell.status !== CellStatus.DEFAULT) {\r\n            return;\r\n        }\r\n\r\n        cell.status = CellStatus.OPEN;\r\n        this.cellsOpen++;\r\n\r\n        if (cell.value === BOMB_VALUE) {\r\n            this.gameStatus = GameStatus.LOST;\r\n            return;\r\n        }\r\n\r\n        if (cell.value === 0) {\r\n            this.openCell(row - 1, column - 1);\r\n            this.openCell(row - 1, column);\r\n            this.openCell(row - 1, column + 1);\r\n            this.openCell(row, column - 1);\r\n            this.openCell(row, column + 1);\r\n            this.openCell(row + 1, column - 1);\r\n            this.openCell(row + 1, column);\r\n            this.openCell(row + 1, column + 1);\r\n        }\r\n\r\n        if (this.isVictory()) {\r\n            this.gameStatus = GameStatus.WON;\r\n        }\r\n    }\r\n\r\n    toggleMarkBomb = (row: number, column: number) => {\r\n        if (this.gameStatus !== GameStatus.IN_PROGRESS) {\r\n            return;\r\n        }\r\n        const cell = this.cells[row][column];\r\n\r\n        if (cell.status === CellStatus.DEFAULT) {\r\n            cell.status = CellStatus.MARKED_BOMB;\r\n        } else if (cell.status === CellStatus.MARKED_BOMB) {\r\n            cell.status = CellStatus.DEFAULT;\r\n        }\r\n    }\r\n\r\n    isVictory() {\r\n        return this.cellsOpen === (TOTAL_ROWS * TOTAL_COLUMNS - TOTAL_BOMBS);\r\n    }\r\n}\r\n","export const BOMB_VALUE = -1;\r\n\r\nexport class MinesweeperFieldGenerator {\r\n    fieldValues: number[][];\r\n\r\n    constructor(\r\n        private readonly columns: number,\r\n        private readonly rows: number,\r\n        private readonly totalBombs: number\r\n    ) {\r\n        this.fieldValues = [];\r\n        for (let i = 0; i < rows; i++) {\r\n            this.fieldValues.push([]);\r\n        }\r\n        this.placeBombs();\r\n        this.placeNumbers();\r\n    }\r\n\r\n    private getBombsNearby(row: number, column: number) {\r\n        let count = 0;\r\n\r\n        const coords = [\r\n            [row - 1, column - 1],\r\n            [row - 1, column],\r\n            [row - 1, column + 1],\r\n            [row, column - 1],\r\n            [row, column + 1],\r\n            [row + 1, column - 1],\r\n            [row + 1, column],\r\n            [row + 1, column + 1]\r\n        ] as const;\r\n\r\n        for (const coord of coords) {\r\n            const row = this.fieldValues[coord[0]] || [];\r\n            const value = row[coord[1]];\r\n            if (value === BOMB_VALUE) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    private placeBombs() {\r\n        let bombsPlaced = 0;\r\n        while (bombsPlaced < this.totalBombs) {\r\n            const row = Math.floor(Math.random() * this.rows);\r\n            const column = Math.floor(Math.random() * this.columns);\r\n            if (this.fieldValues[row][column] !== BOMB_VALUE) {\r\n                this.fieldValues[row][column] = BOMB_VALUE;\r\n                bombsPlaced++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private placeNumbers() {\r\n        for (let i = 0; i < this.rows; i++) {\r\n            for (let j = 0; j < this.columns; j++) {\r\n                if (this.fieldValues[i][j] !== BOMB_VALUE) {\r\n                    this.fieldValues[i][j] = this.getBombsNearby(i, j);\r\n                }\r\n            }\r\n        } \r\n    }\r\n}\r\n","import React from 'react';\r\nimport cn from 'classnames';\r\nimport {observer} from 'mobx-react-lite';\r\n\r\nimport { Cell, CellStatus } from '../store/GameStore';\r\nimport { BOMB_VALUE } from '../utils/MinesweeperFieldGenerator';\r\n\r\nimport './GameCell.css';\r\n\r\ntype Props = {\r\n    cell: Cell;\r\n    onOpen(): void;\r\n    onToggleMarkBomb(): void;\r\n};\r\n\r\nfunction getCellDisplayValue(status: CellStatus, value: number) {\r\n    if (status === CellStatus.DEFAULT) {\r\n        return null;\r\n    }\r\n    if (status === CellStatus.OPEN) {\r\n        return (value === BOMB_VALUE || value === 0) ? null : value;\r\n    }\r\n    \r\n    return '|>';\r\n}\r\n\r\nexport const GameCell: React.FC<Props> = observer((props) => {\r\n    const {cell: {status, value}} = props;\r\n\r\n    const handleContextMenu = (e: React.MouseEvent) => {\r\n        e.preventDefault();\r\n        props.onToggleMarkBomb();\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={cn(\r\n                'cell',\r\n                {'cell_open': status === CellStatus.OPEN},\r\n                {'cell_danger': status === CellStatus.OPEN && value === BOMB_VALUE}\r\n            )}\r\n            onClick={props.onOpen}\r\n            onContextMenu={handleContextMenu}\r\n        >\r\n            {getCellDisplayValue(status, value)}\r\n        </div>\r\n    );\r\n});","import React from 'react';\r\n\r\nimport { GameStore } from '../store/GameStore';\r\nimport { GameCell } from './GameCell';\r\n\r\nimport './GameField.css';\r\n\r\ntype FieldProps = {\r\n    gameStore: GameStore;\r\n};\r\n\r\nexport const GameField: React.FC<FieldProps> = (props) => {\r\n    const {gameStore: {cells, openCell, toggleMarkBomb}} = props;\r\n\r\n    return (\r\n        <div>\r\n            {cells.map((row, i) => (\r\n                <div className=\"row\" key={i}>\r\n                    {row.map((cell, j) => (\r\n                        <GameCell\r\n                            key={j}\r\n                            cell={cell}\r\n                            onOpen={() => openCell(i, j)}\r\n                            onToggleMarkBomb={() => toggleMarkBomb(i, j)}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { GameStore, GameStatus } from \"../store/GameStore\";\r\n\r\ntype Props = {\r\n    gameStore: GameStore;\r\n}\r\n\r\nexport const GameStatusMessage: React.FC<Props> = observer(({gameStore}) => {\r\n    const {gameStatus} = gameStore;\r\n\r\n    if (gameStatus === GameStatus.IN_PROGRESS) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <strong>\r\n            {\r\n                gameStatus === GameStatus.LOST ? 'You lost :(' : 'You won :)'\r\n            }\r\n        </strong>\r\n    );\r\n});","import React from 'react';\n\nimport { GameStore } from './store/GameStore';\nimport { GameField } from './components/GameField';\nimport { GameStatusMessage } from './components/GameStatusMessage';\n\nconst gameStore = new GameStore();\n\nfunction App() {\n  return (\n    <>\n      <GameField gameStore={gameStore} />\n      <GameStatusMessage gameStore={gameStore} />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}